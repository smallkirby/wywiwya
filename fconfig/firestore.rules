rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{uid} {
      function isOwnPath(uid) {
        return uid == request.auth.uid
      }
      function isValidCreation(data) {
        return data.keys().hasAll(['uid', 'photoURL', 'displayName', 'diaries', 'createdAt', 'kusa', 'readNotifications'])
        && data.keys().hasOnly(['uid', 'photoURL', 'displayName', 'diaries', 'createdAt', 'kusa', 'readNotifications'])
        && data.uid is string && data.photoURL is string && data.displayName is string
        && data.diaries is list
        && data.createdAt is timestamp
        && data.kusa is list
        && data.readNotifications is list
        && data.uid == uid
        && data.diaries.size() == 0
        && data.kusa.size() == 0
        && data.readNotifications.size() == 0
        ;
      }
      function isValidUpdate(data) {
        return data.keys().hasAll(['uid', 'photoURL', 'displayName', 'diaries', 'createdAt'])
        && data.keys().hasOnly(['uid', 'photoURL', 'displayName', 'diaries', 'createdAt', 'kusa', 'readNotifications'])
        && data.uid is string && data.photoURL is string && data.displayName is string
        && data.diaries is list
        && data.createdAt is timestamp
        && (
          !data.keys().hasAll(['kusa']) || data.kusa is list
        )
        && (
          !data.keys().hasAll(['readNotifications']) || data.readNotifications is list
        )
        && data.uid == uid
        && data.diff(resource.data).affectedKeys().hasOnly(['photoURL', 'readNotifications'])
        ;
      }
      allow create: if signedIn() && isOwnPath(uid) && isValidCreation(inData());
      allow delete: if false;
      allow update: if signedIn() && isOwnPath(uid) && isValidUpdate(inData());
      allow read: if true;
    }

    match /diaries/{did} {
      function isOwnPath() {
        return resource.data.author == request.auth.uid
      }
      function isPublicList(data) {
        return data.keys().hasAll(['isPublic', 'isTemporary'])
        && data.isPublic is bool
        && data.isTemporary is bool
        && data.isPublic == true
        && data.isTemporary == false
        ;
      }
      function isAuthorList(data) {
        return data.keys().hasAll(['author'])
        && data.author is string
        && data.author == request.auth.uid
        ;
      }
      function isValidUpdate(data) {
        return data.keys().hasAll(['dateID', 'createdAt', 'lastUpdatedAt', 'isPublic', 'isTemporary', 'contentMd', 'author', 'id'])
        && data.keys().hasOnly(['dateID', 'createdAt', 'lastUpdatedAt', 'isPublic', 'isTemporary', 'contentMd', 'author', 'id'])
        && data.diff(resource.data).affectedKeys().hasOnly(['lastUpdatedAt', 'isPublic', 'contentMd', 'isTemporary'])
        && data.lastUpdatedAt is timestamp
        && data.isPublic is bool
        && data.isTemporary is bool
        && data.contentMd is string
        && data.id is string && data.id == did
        ;
      }
      allow create: if false;
      allow delete: if false;
      allow update: if signedIn() && isOwnPath() && isValidUpdate(inData());
      allow list: if isAuthorList(resource.data) || isPublicList(resource.data)
      allow get: if signedIn() && isOwnPath();
    }


    match /{document=**} {
      allow read, write: if false;
    }

    function inData() {
      return request.resource.data;
    }

    function signedIn() {
      return request.auth.uid != null
    }
  }
}